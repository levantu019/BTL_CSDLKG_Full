import arcpy
import os


class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the
        .pyt file)."""
        self.label = "Extract Data From Traffic Layer"
        self.alias = "ExtractData"

        # List of tool classes associated with this toolbox
        self.tools = [ExtractData]


class ExtractData(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Extract Data From Traffic Layer"
        self.description = ""

    def getParameterInfo(self):
        """Define parameter definitions"""

	layer = arcpy.Parameter(
            displayName="Polyline",
            name="layer_in",
            datatype="GPFeatureLayer",
            parameterType="Required",
            direction="Input")

	layer.filter.list = ["Polyline"]

	fields = arcpy.Parameter(
            displayName='Statistics Field(s)',
            name='fields_in',
            datatype='GPValueTable',
            parameterType='Required',
            direction='Input')

	fields.parameterDependencies = [layer.name]
	fields.columns = [['Field', 'Field'], ['GPString', 'Type Field']]
	fields.filters[1].list = ['SHORT', 'LONG', 'FLOAT', 'DOUBLE', 'TEXT', 'DATE']

	nodeT = arcpy.Parameter(
            displayName="Node Traffic",
            name="node_T",
            datatype="GPFeatureLayer",
            parameterType="Required",
            direction="Output")

	segmentT = arcpy.Parameter(
            displayName="Segment Traffic",
            name="segment_T",
            datatype="GPFeatureLayer",
            parameterType="Required",
            direction="Output")

        params = [layer, fields, nodeT, segmentT]
        return params

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        return

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
	# Đọc các tham số đầu vào
	layer_in = parameters[0].valueAsText
	nodeT = parameters[2].valueAsText
	segmentT = parameters[3].valueAsText

	# Lấy giá tên các trường đầu vào
	# fieldAdd: tên trường và kiểu dữ liệu của các trường nhập từ tham số đầu vào
	# fieldName: chỉ lấy mỗi tên nhưng là của các trường đầu vào và 2 trường FromID, ToID
	fields = parameters[1].value
	fieldAdd = []
	fieldName = []
	for item in fields:
	    fieldAdd.append({'name': str(item[0].value), 'type': str(item[1])})
	    fieldName.append(str(item[0].value))

	workspace_node = os.path.dirname(nodeT)
	name_node = os.path.basename(nodeT)

	workspace_seg = os.path.dirname(segmentT)
	name_seg = os.path.basename(segmentT)

	segmentFile = arcpy.CreateFeatureclass_management(workspace_seg, name_seg, 'POLYLINE')
	arcpy.AddField_management(segmentFile, 'SegmentID', 'LONG')

	for item in fieldAdd:
	    arcpy.AddField_management(segmentFile, item['name'], item['type'])

	arcpy.AddField_management(segmentFile, 'FromID', 'LONG')
	arcpy.AddField_management(segmentFile, 'ToID', 'LONG')
	fieldName.append('FromID')
	fieldName.append('ToID')

	# Tạo biến để lưu file gộp tất cả các đoạn thành 1 polyline, trong bộ nhớ 
	memoryMerge = arcpy.CreateFeatureclass_management("in_memory", "mergerAll", "POLYLINE")
	mergeCur = arcpy.da.InsertCursor(memoryMerge, "SHAPE@")

	# Lưu hết các Shape của polyline đầu vào vào 1 mảng (để dễ truy cập -> gom)
	inCursor = arcpy.da.SearchCursor(layer_in, "SHAPE@")
	geoAll = []
	for item in inCursor:
	    geoAll.append(item[0])

	# Quá trình gom tất cả lại
	countGeo = len(geoAll)
	while countGeo > 1:
	    sub = []
	    if countGeo % 2 == 1:
		sizeCurrent = countGeo - 2
		sub.append(geoAll[countGeo-1])
	    else:
		sizeCurrent = countGeo - 1

	    for i in range(0, sizeCurrent, 2):
		sub.append(geoAll[i].union(geoAll[i+1]))

	    geoAll = sub
	    countGeo = len(geoAll)

	# Gom xong thành 1 rồi thì cho vào file tạm
	mergeCur.insertRow((geoAll))
	del mergeCur
	
	# Từ 1 polyline đã gom, trích tất cả các node ra và xoá các duplicate, lưu vào file node đầu ra
	nodeFile = arcpy.FeatureVerticesToPoints_management(memoryMerge, nodeT, "BOTH_ENDS")
	arcpy.DeleteIdentical_management(nodeFile, "Shape")

	# Tạo thêm trường trong file node đầu ra và đánh giá trị cho nó
	arcpy.AddField_management(nodeFile, 'pointID', 'LONG')
	with arcpy.da.UpdateCursor(nodeFile, 'pointID') as updateCur:
	    i = 1
	    for row in updateCur:
		row[0] = i
		i = i + 1
		updateCur.updateRow(row)
	
	# Tạo 1 lớp trong bộ nhớ để lưu các đoạn đường
	segmentMemory = arcpy.CreateFeatureclass_management("in_memory", "segment", "POLYLINE")
	segmentMemoryCur = arcpy.da.InsertCursor(segmentMemory, "SHAPE@")

	# Polyline đã gộp bên trên có các part chính là các đoạn (cái này không chắc chắn đúng)
	# nên duyệt từng part và insert vào file Segment trong bộ nhớ đã tạo ở trên
	countSegment = 0
	with arcpy.da.SearchCursor(memoryMerge, "SHAPE@") as merge:
	    lineMerge = merge.next()[0]
	    countSegment = lineMerge.partCount
	    for i in range(countSegment):
		segmentMemoryCur.insertRow([arcpy.Polyline(lineMerge.getPart(i))])
	del segmentMemoryCur	

	# Đặt workspace là in_memory để làm việc
	arcpy.env.workspace = "in_memory"

	# Join mỗi Segment với Node để tìm lấy 2 điểm nút của nó
	arcpy.analysis.SpatialJoin(segmentMemory, nodeFile, "joinnodeandsegment", "JOIN_ONE_TO_MANY")

	# Join mỗi Segment với Polyline đầu vào để lấy thông tin đoạn đường đó
	arcpy.analysis.SpatialJoin(segmentMemory, layer_in, "joinsegmentandall", "JOIN_ONE_TO_ONE")
	
	# Các trường duyệt searchSegAll
	fieldSegAll = ["TARGET_FID"]
	for item in fieldName[0:len(fieldName)-2]:
	    fieldSegAll.append(item)

	fieldName = ["SHAPE@", "SegmentID"] + fieldName
	insertSegment = arcpy.da.InsertCursor(segmentFile, fieldName)
	searchSegment = arcpy.da.SearchCursor(segmentMemory, "SHAPE@")
	searchNodeSeg = arcpy.da.SearchCursor("joinnodeandsegment", ["TARGET_FID", "pointID"])
	searchSegAll = arcpy.da.SearchCursor("joinsegmentandall", fieldSegAll)

	Node_Seg = searchNodeSeg.next()
	numSegment = 1
	for item in searchSegAll:	    
	    param = [searchSegment.next()[0], numSegment] + list(item[1:len(item)])
	    if item[0] == Node_Seg[0]:
		pntID = Node_Seg[1]
		param.append(pntID)
		Node_Seg = searchNodeSeg.next()
		if item[0] == Node_Seg[0]:
		    param.append(Node_Seg[1])
		    try:
			Node_Seg = searchNodeSeg.next()
		    except:
			pass
		else:
		    param.append(pntID)
	    insertSegment.insertRow(param)
	    numSegment = numSegment + 1

	arcpy.Delete_management("in_memory")
	arcpy.Delete_management(memoryMerge)

        return
